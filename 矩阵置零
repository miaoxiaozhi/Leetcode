1.矩阵置零
给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。

示例 1:

输入: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
输出: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
示例 2:

输入: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
输出: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
进阶:

一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
你能想出一个常数空间的解决方案吗？

方法一：用 map记录的所有为零的行和列号。
使用额外空间 O(m + n)。


class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {

        int m = matrix.size();//行数
        int n = matrix[0].size();//列数

        map<int, int> mapx;
        map<int, int> mapy;        

        int i=0, j=0;

        for(i =0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                if(matrix[i][j] == 0)
                {
                   mapx[i] = i;
                   mapy[j] = j;
                   // mapx.insert(pair<int, int> (i, 0));
                    //mapy.insert(pair<int, int> (j, 0));
                }
              
            }
        }
        for(auto &i:mapx)
        {
            int index = i.second;
            for(int j=0; j<n; j++)
            {
                matrix[index][j] = 0;
            }
        }

         for(auto &i : mapy)
        {
            int index = i.second;
            for(int j=0; j<m; j++)
            {
                matrix[j][index] = 0;
            }
        }
    }
};



方法二： 使用数组的第一行和第一列来记录该行或该列是否存在零元素。

由于存在第一行和第一列都有零元素存在，或者只有一个存在的情况，要单独处理。
可以用两个bool类型做标记。（我一开始用了一个bool, 写着写着自己都懵了）

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {

         if(matrix.empty() || matrix[0].empty())
             return;

        int m = matrix.size();
        int n = matrix[0].size();

        bool firstrow = true;//用于判断第一行是否存在零元素
        bool firstcol = true;//用于判断第一列是否存在零元素

        //扫描第一行
        for(int i=0; i<n; i++)
        {
            if(matrix[0][i] == 0)
            {
                firstrow = false;
                break;
            }
        }

        //扫描第一列
        for(int i=0; i<m; i++)
        {
            if(matrix[i][0] == 0)
            {
                firstcol = false;
                break;
            }
        }

        //从第二行第二列开始扫描
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }

      
        //遍历,如果所在行或列的第一个元素为0，则置为0
        for(int i=1;i<m;++i)
            for(int j=1;j<n;++j)
                if(matrix[i][0]==0 || matrix[0][j]==0)
                    matrix[i][j]=0;


    //根据firstrow的值设置第一行的值
    if(firstrow == false)
    {
        for(int i=0; i<n; i++)
        {
            matrix[0][i] = 0;
        }
    }

    //根据firstcol的值设置第一列
    if(firstcol == false)
    {
        for(int i=0; i<m; i++)
        {
            matrix[i][0] = 0;
        }
    }

    }
};

